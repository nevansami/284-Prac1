     1                                 %line 1+1 get_pin.asm
     2                                 
     3                                 
     4                                 [global get_pin]
     5                                 
     6                                 [section .data]
     7                                 
     8                                 
     9                                 
    10 00000000 456E74657220342D64-     prompt db "Enter 4-digit PIN: ", 0
    11 00000000 696769742050494E3A-
    12 00000000 2000               
    13                                  promptLength equ $ - prompt
    14                                 
    15                                 [section .bss]
    16 00000000 <gap>                   inputLength resb 1
    17 00000001 <gap>                   input resb 1
    18                                 
    19                                 
    20                                 [section .text]
    21                                 
    22                                 
    23                                 
    24                                 get_pin:
    25 00000000 55                      push rbp
    26 00000001 4889E5                  mov rbp, rsp
    27                                 
    28                                 
    29                                 
    30                                 
    31                                 
    32 00000004 B804000000              mov eax, 4
    33 00000009 BB01000000              mov ebx, 1
    34 0000000E B9[00000000]            mov ecx, prompt
    35 00000013 BA14000000              mov edx, promptLength
    36 00000018 CD80                    int 0x80
    37                                 
    38 0000001A B803000000              mov eax, 3
    39 0000001F BB00000000              mov ebx, 0
    40 00000024 B9[00000000]            mov ecx, input
    41 00000029 BA64000000              mov edx, 100
    42 0000002E CD80                    int 0x80
    43 00000030 31C0                    xor eax, eax
    44                                 
    45                                 
    46                                 
    47                                 
    48 00000032 BE[00000000]            mov esi, input
    49                                 string_to_int:
    50 00000037 670FB60E                movzx ecx, byte [esi]
    51 0000003B 83F90A                  cmp ecx, 10
    52 0000003E 740A                    jz done
    53 00000040 83E930                  sub ecx, '0'
    54 00000043 6BC00A                  imul eax, eax, 10
    55 00000046 01C8                    add eax, ecx
    56 00000048 FFC6                    inc esi
    57 0000004A EBE9                    jmp string_to_int
    58                                 
    59                                 
    60                                 done:
    61                                 
    62                                 
    63                                 
    64                                 
    65                                 
    66 0000004C B801000000              mov eax, 1
    67 00000051 31DB                    xor ebx, ebx
    68 00000053 CD80                    int 0x80
    69                                 
    70                                 
    71 00000055 C9                      leave
    72 00000056 C3                      ret
